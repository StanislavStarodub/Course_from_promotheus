1. SDLC та DevOps. Глосарій
Software development life cycle — процес розробки програмного забезпечення від початку до кінця. SDLC зазвичай включає такі етапи як планування, збір вимог, проєктування, реалізація, тестування, розгортання та супровід.

Continuous integration — практика безперервного об'єднання змін коду в спільне сховище коду. Вона передбачає створення, тестування та інтеграцію змін коду в загальний репозиторій кілька разів на день, щоб виявляти та вирішувати проблеми на ранній стадії.

Continuous delivery — це практика безперервного розгортання програмного забезпечення у виробничому або тестовому середовищі після того, як воно пройшло фазу автоматизованого тестування. Це гарантує, що програмне забезпечення може бути випущене швидко і з меншою кількістю помилок.

Continuous deployment — практика автоматичного випуску програмного забезпечення у виробництво після того, як воно пройде всі автоматизовані тести. Це означає, що програмне забезпечення може бути розгорнуте у виробничому середовищі без будь-якого втручання людини.

Automation — процес використання технологій для автоматизації повторюваних завдань. У контексті CICD автоматизація використовується для створення, тестування та розгортання змін до програмного забезпечення.

Testing — процес перевірки того, що програмне забезпечення працює за призначенням. Автоматизоване тестування є важливою частиною CICD, оскільки воно допомагає виявити помилки на ранній стадії процесу розробки.

Version control — практика відстеження та управління змінами в програмному коді. Системи контролю версій, такі як Git, дозволяють розробникам співпрацювати над кодом і відстежувати зміни в часі.

Build automation — практика автоматизації процесу збірки програмного забезпечення. Це передбачає використання таких інструментів, як Gradle або Maven для створення, пакування та тестування програмного забезпечення.

Deployment pipeline — процес створення, тестування та розгортання змін у програмному забезпеченні у повторюваний та автоматизований спосіб. Він дозволяє командам випускати програмне забезпечення швидко і з меншою кількістю помилок.

Feedback loop — процес надання зворотного зв'язку розробникам щодо змін у програмному забезпеченні. Це допомагає командам виявляти та вирішувати проблеми на ранніх стадіях процесу розробки.

Інфраструктура як код — це практика управління інфраструктурою за допомогою коду. Це дозволяє версіонувати інфраструктуру, тестувати її та поводитися з нею, як з програмним кодом.

Planning — процес визначення цілей і завдань програмного проєкту. Це передбачає визначення зацікавлених сторін, визначення вимог та створення плану проєкту.

Requirements gathering — процес збору та документування функціональних і нефункціональних вимог до програмного проєкту. Це робота із зацікавленими сторонами, щоб зрозуміти їхні потреби та очікування.

Design — процес створення схеми того, як буде побудовано програмне забезпечення. Сюди входить створення технічних специфікацій, архітектурних діаграм та дизайну користувацького інтерфейсу.

Implementation — процес написання та тестування коду для створення програмного забезпечення. Це етап, на якому програмне забезпечення фактично розробляється.

Testing — процес перевірки того, що програмне забезпечення працює за призначенням. Це включає модульне тестування, інтеграційне тестування та приймальне тестування.

Deployment — процес випуску програмного забезпечення для користувачів. Сюди входить пакування програмного забезпечення, створення інструкцій з встановлення та надання підтримки користувачам.

Maintenance — процес виправлення помилок та оновлення програмного забезпечення після його розгортання. Це гарантує, що програмне забезпечення залишається функціональним та актуальним.

Waterfall model — традиційна методологія SDLC, де кожен етап процесу розробки завершується перед переходом до наступного етапу. Це лінійний підхід до розробки програмного забезпечення.

Agile methodologies — ітеративний підхід до розробки програмного забезпечення, який наголошує на співпраці, гнучкості та постійному вдосконаленні. У CICD зазвичай використовуються гнучкі методології, такі як Scrum або Kanban.

Управління конфігурацією — практика управління конфігурацією інфраструктури та програмного забезпечення. Це передбачає використання таких інструментів, як Ansible або Puppet для автоматизації змін конфігурації.

Моніторинг — процес вимірювання та збору даних про продуктивність програмного забезпечення та поведінку користувачів. Це допомагає командам виявляти проблеми та вдосконалювати програмне забезпечення з часом.

Release management — процес управління випуском змін до програмного забезпечення у виробничих середовищах. Це передбачає координацію з різними командами для забезпечення безпечного та ефективного випуску програмного забезпечення.

Cloud computing — практика використання віддалених серверів для зберігання, управління та обробки даних. Хмарні обчислення часто використовуються в DevOps для забезпечення масштабованої та гнучкої інфраструктури для розробки та доставки програмного забезпечення.